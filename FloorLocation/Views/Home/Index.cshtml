@model IEnumerable<FloorLocation.Models.Location>
@{
    ViewData["Title"] = "Locations";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int? pageSize = 0;
    if (@ViewData["PageSize"] is not null)
    {
        pageSize = (int?)@ViewData["PageSize"];
    }
    int? pageCount = 0;
    if(@ViewData["PageCount"] is not null) {
        pageCount = (int?)@ViewData["PageCount"];
    }
    int? recordCount = 0;
    if (@ViewData["RecordCount"] is not null)
    {
        recordCount = (int?)@ViewData["RecordCount"];
    }
    int? pageNumber = 0;
    if (@ViewData["PageNumber"] is not null)
    {
        pageNumber = (int?)@ViewData["PageNumber"];
    }
    string btnClass = "inactive";
    int? firstSetPage = (pageNumber * pageSize) - (pageSize - 1);
    int? lastSetPage = pageNumber * pageSize;
    if(lastSetPage > recordCount)
    {
        lastSetPage = recordCount;
    }
    List<SelectListItem> items = new List<SelectListItem>();
    items.Add(new SelectListItem { Text = "5", Value = "5", Selected = true });
    items.Add(new SelectListItem { Text = "10", Value = "10" });
}
<div class="wrapper">
    <div class="container">
        <a asp-action="Add" class="btn">Add Location</a>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Location Name</th>
                    <th scope="col">Location Id</th>
                    <th scope="col">Is Clearance</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayTextFor(modelItem => item.LocationName)
                        </td>
                        <td>
                            @Html.DisplayTextFor(modelItem => item.LocationId)
                        </td>
                        <td>
                            @Html.DisplayTextFor(modelItem => item.IsClearance)
                        </td>
                        <td>
                            <button class="btn" id="@item.LocationName" onclick="inlineEdit(this)">Update</button>
                            |
                            @Html.ActionLink("Delete", "Delete", new { LocationName = item.LocationName, PageSize = pageSize, PageNumber = pageNumber }, new { @id = item.LocationName, @class = "btn" })
                        </td>
                    </tr>
                }
                <tr>
                    <td colspan="4">
                        <div class="pageNavigation">
                            <div class="paging">
                                @if (pageNumber == 1) { btnClass = "active"; } else { btnClass = "inactive"; }
                                @Html.ActionLink("1", "Index", "Home", new { PageSize = pageSize, PageNumber = 1 }, new { @class = btnClass })
                                @if (pageNumber < pageSize)
                                {
                                    for (var i = 2; i <= pageSize; i++)
                                    {
                                        if (pageNumber != 1 && i == pageNumber) { btnClass = "active"; } else { btnClass = "inactive"; }
                                        @Html.ActionLink(i.ToString(), "Index", "Home", new { PageSize = pageSize, PageNumber = i }, new { @class = btnClass })
                                    }
                                    <div>...</div>
                                }
                                else if (pageNumber > (pageCount - 4))
                                {
                                    <div>...</div>
                                    for (var i = (pageCount - 4); i < pageCount; i++)
                                    {
                                        if (pageNumber != 1 && i == pageNumber) { btnClass = "active"; } else { btnClass = "inactive"; }
                                        @Html.ActionLink(i.ToString(), "Index", "Home", new { PageSize = pageSize, PageNumber = i }, new { @class = btnClass })
                                    }
                                }
                                else
                                {
                                    <div>...</div>
                                    for (var i = (pageNumber - 1); i < (pageNumber + 2); i++)
                                    {
                                        if (pageNumber != 1 && i == pageNumber) { btnClass = "active"; } else { btnClass = "inactive"; }
                                        @Html.ActionLink(i.ToString(), "Index", "Home", new { PageSize = pageSize, PageNumber = i }, new { @class = btnClass })
                                    }
                                    <div>...</div>
                                }
                                @if (pageNumber == pageCount) { btnClass = "active"; } else { btnClass = "inactive"; }
                                @Html.ActionLink(pageCount.ToString(), "Index", "Home", new { PageSize = pageSize, PageNumber = pageCount }, new { @class = btnClass })
                            </div>
                            <div>
                                Page Size: @Html.DropDownList("PageSize", items, new { @id = "PageSize" })
                            </div>
                            <div class="info">
                                @firstSetPage - @lastSetPage of @recordCount items
                            </div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
<script>
    const pageSize = document.querySelector('#PageSize');
    pageSize.onchange = function () {
        const size = pageSize.value;
        window.location = "/Home/Index?PageSize=" + size + "&PageNumber=1";
    };
    function inlineEdit(elem) {
        alert("hollo " + elem.id);
        // just replace the entire row with editors and populate it from an api
        // then save it back after updating the data source showing the updated values
    }
</script>